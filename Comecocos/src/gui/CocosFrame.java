package gui;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author cristian
 */

import data.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class CocosFrame extends javax.swing.JFrame {
    private Rejilla rejilla;
    private Pac pac=new Pac();
    private Fantasma azul=new Fantasma();
    private Fantasma rojo=new Fantasma();
    private Fantasma rosa=new Fantasma();
    private Fantasma naranja=new Fantasma();
    private int nivel=2;
    private boolean pausa=false;
    private Sonido sonido;
    private boolean primera=true;
    private muevePac muevepac;
    private mueveRojo mueverojo;
    private mueveAzul mueveazul;
    private mueveRosa mueverosa;
    private mueveNaranja muevenaranja;
    private int RECORD;
    /**
     * Creates new form CocosFrame
     */
    public CocosFrame() {
        initComponents();
        rejilla=new Rejilla(28,31);
        muevepac=new muevePac(this,nivel);
        mueverojo=new mueveRojo(this,nivel);
        mueveazul=new mueveAzul(this,nivel);
        mueverosa=new mueveRosa(this,nivel);
        muevenaranja=new mueveNaranja(this,nivel);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Inicio = new javax.swing.JButton();
        Pausa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        puntuacion = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        time = new javax.swing.JTextArea();
        rejillaPanel1 = new RejillaPanel(this);
        jScrollPane3 = new javax.swing.JScrollPane();
        vidas = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        Record = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        restante = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Inicio.setText("Iniciar");
        Inicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InicioActionPerformed(evt);
            }
        });

        Pausa.setText("Pausa");
        Pausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PausaActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        puntuacion.setColumns(20);
        puntuacion.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        puntuacion.setRows(5);
        jScrollPane1.setViewportView(puntuacion);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        time.setColumns(20);
        time.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        time.setRows(5);
        jScrollPane2.setViewportView(time);

        javax.swing.GroupLayout rejillaPanel1Layout = new javax.swing.GroupLayout(rejillaPanel1);
        rejillaPanel1.setLayout(rejillaPanel1Layout);
        rejillaPanel1Layout.setHorizontalGroup(
            rejillaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );
        rejillaPanel1Layout.setVerticalGroup(
            rejillaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 465, Short.MAX_VALUE)
        );

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        vidas.setColumns(20);
        vidas.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        vidas.setRows(5);
        vidas.setSelectedTextColor(new java.awt.Color(235, 255, 0));
        vidas.setSelectionColor(new java.awt.Color(1, 1, 1));
        jScrollPane3.setViewportView(vidas);

        jTextField1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextField1.setText("Record");

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        Record.setColumns(20);
        Record.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        Record.setRows(5);
        jScrollPane4.setViewportView(Record);

        jTextField2.setText("Tiempo restantante");

        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane6.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        restante.setColumns(20);
        restante.setFont(new java.awt.Font("Cantarell", 0, 14)); // NOI18N
        restante.setRows(5);
        restante.setSelectedTextColor(new java.awt.Color(235, 255, 0));
        restante.setSelectionColor(new java.awt.Color(1, 1, 1));
        jScrollPane6.setViewportView(restante);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Inicio)
                        .addGap(18, 18, 18)
                        .addComponent(Pausa))
                    .addComponent(rejillaPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                    .addComponent(jTextField1)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                                .addGap(30, 30, 30))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Inicio)
                            .addComponent(Pausa))
                        .addGap(27, 27, 27)
                        .addComponent(rejillaPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InicioActionPerformed
        if(primera)
        sonido=new Sonido();
        primera=false;
        nivel=1;
        pac.setVidas(3);
        
        rejilla.setPuntuacion(0);
        rejilla.setMovimiento(-1);
        
        muevepac.reanudar();
        muevepac.iniciar();
        mueverojo.reanudar();
        mueveazul.reanudar();
        mueverosa.reanudar();
        muevenaranja.reanudar();
        rejillaPanel1.requestFocus();
        muevepac.restartTime();
        reiniciar();
    }//GEN-LAST:event_InicioActionPerformed

    private void PausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PausaActionPerformed
        // TODO add your handling code here:
        if(!pausa){
            
        muevepac.suspender();
        mueverojo.suspender();
        mueveazul.suspender();
        mueverosa.suspender();
        muevenaranja.suspender();
        pausa=true;
        }
        else {muevepac.reanudar();
        mueverojo.reanudar();
        mueveazul.reanudar();
        mueverosa.reanudar();
        muevenaranja.reanudar();
        
        pausa=false;rejillaPanel1.requestFocus();}
    }//GEN-LAST:event_PausaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CocosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CocosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CocosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CocosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CocosFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Inicio;
    private javax.swing.JButton Pausa;
    private javax.swing.JTextArea Record;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextArea puntuacion;
    private gui.RejillaPanel rejillaPanel1;
    private javax.swing.JTextArea restante;
    private javax.swing.JTextArea time;
    private javax.swing.JTextArea vidas;
    // End of variables declaration//GEN-END:variables

    /**
     * Obtiene la rejilla
     * @return rejilla
     */
    public Rejilla getRejilla(){
        return rejilla;
    }
    
    /**
     * Devuelve el panel
     * @return panel
     */
    
    public RejillaPanel getPanel(){
        return rejillaPanel1;
    }
    
    /**
     * Devuelve el Pac
     * @return pac
     */
    
    public Pac getPac(){
        return pac;
    }
    
    /**
     * Añade un nivel, se actulizan los retardos. 
     * Cada cinco niveles se añade una vida.
     */
    
    public void aumentarNivel(){
        for(int i=0;i<100;i=i+5){
            if(nivel==i){
                pac.setVidas(pac.getVidas()+1);
            }
        }
        nivel++;
        rejilla.initRejilla();
        rejilla.setPrimera();
        mueverosa.addLevel(nivel);
        muevepac.addLevel(nivel);
        mueverojo.addLevel(nivel);
        mueveazul.addLevel(nivel);
        muevenaranja.addLevel(nivel);
    }
    
    /**
     * Método que imprime en el recuadro correspondiente la puntuación actual
     * @param puntos puntuación inicial
     */
    public void setPuntuacion(int puntos){
        puntuacion.setText("Puntuación:\n"+puntos);
    }
    
    /**
     * Imprime en el recuadro de time el tiempo actual
     * @param tiempo el tiempo actual
     */
    
    public void setTime(long tiempo){
        time.setText("Tiempo:\n"+tiempo+" s");
    }
    
    /**
     * Muestra el número de vidas en su lugar correspondiente
     * @param vida número de vidas actuales
     */
    
    public void setVidas(int vida){
      
        vidas.setText("Vidas: "+vida);
    
    }
    
    /**
     * Devuelve el fantasma rojo
     * @return fantasma rojo
     */
    
    public Fantasma getRojo(){
        return rojo;
    }
    
    /**
     * Devuelve el fantasma azul
     * @return fantasma azul
     */
    
    public Fantasma getAzul(){
        return azul;
    }
    
    /**
     * Devuelve el fantasma rosa
     * @return fantasma rosa
     */
    
    public Fantasma getRosa(){
        return rosa;
    }
    
    /**
     * Devuelve el fantasma naranja
     * @return fantasma naranja
     */
    
    public Fantasma getNaranja(){
        return naranja;
    }
    
    /**
     * Método que se llama al acabar el juevo o pulsar jugar de nuevo, reinicia las posiciones
     * de los elementos.
     */
    
    public void reiniciar(){
        rejilla.initRejilla();
        rejilla.setMovimiento(-1);
        pac.reiniciarPac();
        rojo.setXOrigen(12);
        rojo.setYOrigen(14);
        rojo.setTipo(6);
        rojo.setAnt(2);
        azul.setXOrigen(13);
        azul.setYOrigen(14);
        azul.setTipo(5);
        azul.setAnt(2);
        rosa.setXOrigen(14);
        rosa.setYOrigen(14);
        rosa.setTipo(7);
        rosa.setAnt(2);
        naranja.setXOrigen(15);
        naranja.setYOrigen(14);
        naranja.setTipo(8);
        naranja.setAnt(2);
        rejilla.setLose(false);
        
    }
    
    /**
     * Consultamos el fichero donde está guardado el record actual, en caso de que no exista
     * se crea uno nuevo con la puntuación record actual.
     * 
     * @param puntuacion
     * @throws IOException 
     */
    
    public void setRecord(int puntuacion) throws IOException{
        String sFichero = "record.txt";
        File fichero = new File(sFichero);
        
        if (fichero.exists()){
        
            BufferedReader rw=new BufferedReader(new FileReader(sFichero)); 
            String actuals=rw.readLine();
            if(actuals!=null){
            int actual=Integer.parseInt(actuals);
           
            if(actual<puntuacion){
                PrintWriter pw = new PrintWriter ( new FileWriter (sFichero));
               pw.println(puntuacion);
               pw.close();
                Record.setText(""+puntuacion);

            }
            else Record.setText(""+actual);
        }}
        else {
                PrintWriter pw = new PrintWriter ( new FileWriter (fichero));
               pw.println(puntuacion);
               pw.close();
               Record.setText(""+puntuacion);
        }
    }
    
    /**
     * Ponemos en la ventana el tiempo restante.
     * @param restantes 
     */
    
    public void setRestante (long restantes){
        restante.setText("       "+restantes);
    }

}
